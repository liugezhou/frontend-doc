(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{278:function(e,a,s){"use strict";s.r(a);var r=s(13),t=Object(r.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("仓库示例代码地址："),a("a",{attrs:{href:"https://github.com/liugezhou/webpack-demo",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/liugezhou/webpack-demo"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"目录结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[e._v("#")]),e._v(" 目录结构")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("|-- webpack-demo\n    |-- .babelrc\n    |-- .eslintrc.js\n    |-- .gitignore\n    |-- index.html\n    |-- package-lock.json\n    |-- package.json\n    |-- postcss.config.js\n    |-- readme.md\n    |-- server.js\n    |-- .vscode\n    |   |-- settings.json\n    |-- build\n    |   |-- webpack.base.js\n    |   |-- webpack.dev.js\n    |   |-- webpack.prod.js\n    |-- src\n    |   |-- createAvatar.js\n    |   |-- img.png\n    |   |-- index.js\n    |   |-- index.scss\n    |   |-- font\n    |       |-- iconfont.eot\n    |       |-- iconfont.svg\n    |       |-- iconfont.ttf\n    |       |-- iconfont.woff\n    |-- src_HMR\n    |   |-- counter.js\n    |   |-- index.js\n    |   |-- number.js\n    |   |-- style.css\n    |-- src_babel\n    |   |-- index.js\n    |-- src_css\n    |   |-- index.js\n    |   |-- style.css\n    |   |-- style1.css\n    |-- src_devserver\n    |   |-- home.js\n    |   |-- index.js\n    |   |-- list.js\n    |-- src_env\n    |   |-- webpack.base.js\n    |   |-- webpack.dev.js\n    |   |-- webpack.prod.js\n    |-- src_lazy\n    |   |-- index.js\n    |-- src_pwa\n    |   |-- index.js\n    |-- src_react\n    |   |-- .babelrc\n    |   |-- index.js\n    |-- src_shaking\n    |   |-- index.js\n    |   |-- math.js\n    |-- src_shimming\n    |   |-- index.js\n    |   |-- jquery.ui.js\n    |-- src_split\n        |-- code_splitting.js\n        |-- index.js\n        |-- test.js\n")])])]),a("h3",{attrs:{id:"初识-webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初识-webpack"}},[e._v("#")]),e._v(" 初识 webpack")]),e._v(" "),a("ul",[a("li",[e._v("webpack is a module bundler.")]),e._v(" "),a("li",[e._v("webpack 核心定义是一个模块打包工具。")]),e._v(" "),a("li",[e._v("webpack module：ES Module、CommonJS、CMD、AMD")])]),e._v(" "),a("h3",{attrs:{id:"搭建-webpack-环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建-webpack-环境"}},[e._v("#")]),e._v(" 搭建 webpack 环境")]),e._v(" "),a("ul",[a("li",[e._v("webpack 本质上是由 node 实现的。")]),e._v(" "),a("li",[e._v("不推荐全局安装 webpack")]),e._v(" "),a("li",[e._v("查看所有的 webpack 历史版本："),a("code",[e._v("npm view webpack versions")])]),e._v(" "),a("li",[e._v("查看最新 webpack 版本："),a("code",[e._v("npm view webpack version")])]),e._v(" "),a("li",[e._v("本地项目安装完成后，查看 webpack 的版本："),a("code",[e._v("npx webpack -v")])]),e._v(" "),a("li",[e._v("假如本地全局安装了 webpack，想看 webpack 安装目录："),a("code",[e._v("npm ls webpack -g")])])]),e._v(" "),a("h3",{attrs:{id:"webpack-的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的配置"}},[e._v("#")]),e._v(" webpack 的配置")]),e._v(" "),a("ul",[a("li",[e._v("mode:production(代码压缩),development(代码未压缩)")]),e._v(" "),a("li",[e._v("entry:打包进入文件")]),e._v(" "),a("li",[e._v("output: 打包输出路径")]),e._v(" "),a("li",[e._v("以某文件为配置文件打包：npx webpack --config webpackConfig.js")]),e._v(" "),a("li",[e._v("loader 是什么：打包方案(对于特定文件的打包处理:比如 file-loader 可以对图片、字体等静态资源文件进行打包) ,loader 的执行顺序是由下往上，由左至右。")]),e._v(" "),a("li",[e._v("常用文件 loader：file-loader、url-loader")]),e._v(" "),a("li",[e._v("常用样式 loader：postcss-loader(autoprefixer)、sass-loader、css-loader、style-loader")]),e._v(" "),a("li",[e._v("module:一些 loader 规则（比如使用 file-loader 的时候，想让图片的打包名字不改变，可以在 module 的 rules 中配置 use 属性的 options 属性）")]),e._v(" "),a("li",[e._v("plugins: 可以在 webpack 运行到某个时刻的时候，帮你做一些事情 类似与 vue 中的生命周期函数。\n"),a("ul",[a("li",[e._v("html-webpack-plugin:会在打包结束后自动生成一个 html 文件，并把打包生成的 js 自动引入到这个 html 文件中。")]),e._v(" "),a("li",[e._v("clean-webpack-plugin:打包生成 dist 目录下的覆盖(1.0 版本可以正常打包，3.0 报错)。")])])])]),e._v(" "),a("h3",{attrs:{id:"打包出的资源-cdn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打包出的资源-cdn"}},[e._v("#")]),e._v(" 打包出的资源 CDN")]),e._v(" "),a("p",[e._v("打包出的资源 js,css 等一般为本地静态文件，但我们需要将这些文件放到 CDN 中，然后在打包出的 index.html 引用，我们可以这么做：")]),e._v(" "),a("ul",[a("li",[e._v("在 output 中配置，publicPath:'https://cdn.com'")])]),e._v(" "),a("h3",{attrs:{id:"sourcemap-的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sourcemap-的配置"}},[e._v("#")]),e._v(" sourceMap 的配置")]),e._v(" "),a("ul",[a("li",[e._v("项目打包后，如果关闭 sourceMap 的配置，在浏览器打开项目后，看到的 js 代码为打包后的代码，不利于查找代码错误。")]),e._v(" "),a("li",[e._v("sourceMap 是一个映射关系，他可以知道在 dist 打包后的 main.js 错误的代码对应在未经打包的代码的位置。")]),e._v(" "),a("li",[e._v("配置项为：")]),e._v(" "),a("li",[e._v("devtool:'source-map'---会在 dist 目录下生成一个.map 的映射文件。")]),e._v(" "),a("li",[e._v("如果为'inline-source-map'，则不会生成.map 文件，直接在原 main.js 文见中添加注释以映射(位置在底部)。")]),e._v(" "),a("li",[e._v("如果为'cheap-inline-source-map' :与 inline 不同，只告诉是哪行代码出错，效率会高一些。")]),e._v(" "),a("li",[e._v("如果为\"cheap-module-source-map':不管是业务代码，但是依赖的第三方模块，都会显示出出错的地方。")]),e._v(" "),a("li",[e._v("eval 是打包效率最高的方式。"),a("br"),e._v('\n如果是开发环境，建议使用“cheap-module-eval-source-map\'这种方式。如果是生产环境，一般不用设置 devtool 的配置。如果要配置，推荐使用"cheap-module-source-map"。')])]),e._v(" "),a("h3",{attrs:{id:"使用-webpackdevserver-提升开发效率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-webpackdevserver-提升开发效率"}},[e._v("#")]),e._v(" 使用 WebpackDevServer 提升开发效率")]),e._v(" "),a("p",[e._v("需要依赖的包为：webpack-dev-devserver -D\n配置项说明：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("devServer{\n contentBase:'./dist',    // 要监听的文件目录\n open:true,               // 自动打开浏览器窗口\n port:8000,               // 设置监听端口\n hot:true,                // 开启热更新\n proxy:{},                // 代理设置\n}\n")])])]),a("p",[e._v("要实现的效果是修改了一个 index.js 文件中的代码，可以不用重新打包，直接去运行 index.html 的文件。要实现这种效果有三种方法：")]),e._v(" "),a("ol",[a("li",[e._v("在 package.json 文件中给 script 命令加一个 --watch 的参数。当加入 watch 参数后，会监听文件，如果源文件代码修改，会实时的更新打包。")]),e._v(" "),a("li",[e._v("webpack-dev-server（webpack 不自带，需要安装的）:第一次运行脚本的时候，自动打包、打开浏览器、热更新等功能。此外隐藏的一个功能是，webpack-dev-server 会对我们 src 下的文件进行打包，但是没有 dist 目录，是因为将 dist 打包保存至电脑内存。")]),e._v(" "),a("li",[e._v("在 node 中直接使用 webpack：通过 express 与 webpack-dev-middleware 手写一个 server.js。")])]),e._v(" "),a("h3",{attrs:{id:"hmr-hot-module-replacement-热模块替换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hmr-hot-module-replacement-热模块替换"}},[e._v("#")]),e._v(" [HMR] hot Module Replacement(热模块替换)")]),e._v(" "),a("p",[e._v("场景：js 动作添加一些模块后，如果修改 css 文件，webpack 会将之前的行为给删除，HMR 就是解决只修改 css 样式，但是不更改行为。")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("需要在 devServer 中配置 hot 和 hotOnly")])]),e._v(" "),a("li",[a("p",[e._v("测试环境下需要在 Plugin 中添加热更新的操作：new webpack.HotModuleReplacementPlugin()")])]),e._v(" "),a("li",[a("p",[e._v("本质上实现热更新，是因为在代码中设置了如下配置")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if(module.hot){\n  module.hot.accept('./some.js',(){\n    // 一些document或其他操作\n  })\n}\n")])])]),a("ul",[a("li",[e._v("CSS、Vue 之所以可以直接热更新就是因为，css-loader、vue-loader 中写入了上方的代码逻辑(或者 babel-presets)。")])]),e._v(" "),a("h3",{attrs:{id:"使用-babel-处理-es6-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-babel-处理-es6-语法"}},[e._v("#")]),e._v(" 使用 Babel 处理 ES6 语法")]),e._v(" "),a("ul",[a("li",[e._v("安装第三方依赖：'babel-loader'、'@babel/core'：babel-loader 只是 webpack 与 babel 的一个沟通桥梁，并不会将 ES6 代码转化为 ES5 代码。")]),e._v(" "),a("li",[e._v("继续安装@babel/preset-env，用于将 ES6 代码转为 ES5 代码。")]),e._v(" "),a("li",[e._v("配置 webpack.config.js。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" {\n    test: /\\.js$/,\n    exclude: /node_modules/,\n    use:[{\n      loader:'babel-loader'\n    },\n    ],\n    options:{\n      presets:[\"@babel/preset-env\"]\n    }\n  }\n")])])]),a("p",[e._v("这个时候就可以将ES6代码转为ES5了，但是只是做到这里还不够，比如转为ES5代码的map等可能在低版本浏览器还是不支持。")]),e._v(" "),a("ul",[a("li",[e._v("为了解决低版本依旧不支持哪些代码，继续安装@babel/polyfill(对低版本的一个完善)")]),e._v(" "),a("li",[e._v("使用的时候直接在全局引入即可:import '@babel/polyfill'")]),e._v(" "),a("li",[e._v("这样存在一个问题，打出的包非常的大，然后解决之：直接加个配置useBuiltIns：usage"),a("br"),e._v("\n它的含义是当我们在做polyfill填充的时候，加一些低版本不存在的特性的时候，不会把全部加载，只是根据业务代码进行加载。")])]),e._v(" "),a("div",{staticClass:"language-{ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    test: /\\.js$/,\n    exclude: /node_modules/,\n    loader: 'babel-loader',\n    options:{\n      presets: [['@babel/preset-env',{\n        targets: {\n          \"chrome\": \"67\",\n        },\n        useBuiltIns:'usage'\n      }]]\n    }\n  }\n")])])]),a("p",[a("strong",[e._v("tips:")]),e._v(" presets中@babel/preset-env中还可以配置target属性，指定最低版本浏览器,以上代码在webpack-config.js中配置演示。"),a("br"),e._v("\n**特别注意：**在Webpack4 版本中，如果使用.babelrc配置文件配置了@babel/prest-env,且设置了useBuiltIns，那么在业务代码中就不用引入\n@babel/polyfill了。")]),e._v(" "),a("p",[e._v("以上为一种babel的配置，代码中如果只写业务代码就够了。\n但并不是所有都适用，比如在开发一些三方类库、组件库的时候、或者一个模块的时候，polyfill注入会污染全局环境。"),a("br"),e._v("\n而plugin-transform-runtime会以闭包的形式引入变量，不会污染全局变量。"),a("br"),e._v("\n接下来介绍另一种babel的配置(不用babel-polyfill的方式)")]),e._v(" "),a("ol",[a("li",[e._v("安装@babel/plugin-transform-runtime 【】")]),e._v(" "),a("li",[e._v("安装 @babel/runtime")]),e._v(" "),a("li",[e._v("将上面options内容清空，替换为：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"plugins": [\n  [\n    "@babel/plugin-transform-runtime",\n    {\n      "absoluteRuntime": false,\n      "corejs": 2,\n      "helpers": true,\n      "regenerator": true,\n      "version": "7.0.0-beta.0"\n    }\n  ]\n]\n')])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("由于有关babel的配置项也特别多，于是可以直接在根目录下新建 .babelrc文件，将以上配置内容写入到该文件中：")]),e._v(" "),a("li",[e._v("由于上述文件cordjs设置为了2，所以还需要安装"),a("code",[e._v("@babel/runtime-corejs2")]),e._v("这个包。")])]),e._v(" "),a("h3",{attrs:{id:"配置react代码的打包-src-react"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置react代码的打包-src-react"}},[e._v("#")]),e._v(" 配置React代码的打包(src_react)")]),e._v(" "),a("ul",[a("li",[e._v("在babel官网--文档--预设中有 @babel/preset-react这个选项")]),e._v(" "),a("li",[e._v("安装@babel/preset-react")]),e._v(" "),a("li",[e._v("在.babelrc中配置")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "presets": [\n    ["@babel/preset-env",{\n      "targets": {\n        "chrome": "67"\n      },\n      "useBuiltIns":"usage"\n    }],\n    ["@babel/preset-react"]\n  ]\n}\n')])])]),a("h3",{attrs:{id:"tree-shaking-webpack自带-src-shaking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking-webpack自带-src-shaking"}},[e._v("#")]),e._v(" Tree Shaking-Webpack自带（src_shaking）")]),e._v(" "),a("ul",[a("li",[e._v("Tree Shaking 在 webpack2.0 之后引入。")]),e._v(" "),a("li",[e._v("在 math.js 这个模块中有两个方法 add 和 minus，在 index 中只调用 add 方法，去打包的时候，会将 math 中的两个方法均打包，这样做是没有必要，且会使得打包文件变大，Tree Shaking 就是为了解决这个问题的。")]),e._v(" "),a("li",[e._v("Tree Shaking "),a("strong",[e._v("只支持 ES Module")]),e._v("(即 import 这种模块引入，require 这种的不支持)。")])]),e._v(" "),a("p",[e._v("mode 为 development 环境：")]),e._v(" "),a("ul",[a("li",[e._v("默认没有 Tree Shaking 功能。配置的话需要在webpack.config.js配置文件中添加 "),a("code",[e._v("optimization:{usedExports:true},")]),e._v(" ，并且如果直接引入第三方资源，如果也不想做 Tree Shaking，需要在 package.json 中配置"),a("code",[e._v("sideEffects:false")]),e._v(" "),a("ul",[a("li",[e._v("（比如业务代码中使用了 polyfill,在其内部并没有导出什么模块，而是在其内部向全局window添加了一些方法(eg window.Promise)，于是如果我们使用了TreeShaking，发现没有导出内容，就会忽略其内容，但这里我们是不可以忽略的，于是为了消除TreeShaking对他的影响，"),a("code",[e._v("package.json")]),e._v('中添加： "sideEffects":["@babel/polyfill"],以忽略 Tree Shaking 对其作用）')])])]),e._v(" "),a("li",[e._v('在我们 math 这个例子中，并未用到 polyfill , 我们继续在 package.json 中配置： "sideEffects":false')]),e._v(" "),a("li",[e._v("这个时候我们用 webpack 打包，发现打包文件中，minus 这个方法也被打包保留了下来，但是文件中有提示，告知我们只要 add 方法使用了。之所以有代码的保留是因为在开发环境下我们会调试代码，为了使得行行对应。")])]),e._v(" "),a("p",[e._v("mode 为 production 环境时(开发环境仍会保留代码)：")]),e._v(" "),a("ul",[a("li",[e._v("Tree-Shaking 才算真正生效。")]),e._v(" "),a("li",[e._v("在 production 环境下，Tree-Shaking 默认已经配置好了，在 webpack 的配置文件下不需要对"),a("code",[e._v("optimization")]),e._v("配置。")]),e._v(" "),a("li",[e._v("但是仍然需要对 package.json 中的 sideEffects 进行配置。")]),e._v(" "),a("li",[e._v("使用 webpack 打包会发现生成一个.map 的映射文件，且打包文件被压缩，注释去掉、minus 有关的代码也剔除掉了。")])]),e._v(" "),a("h3",{attrs:{id:"development-和-production-模式的区分打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#development-和-production-模式的区分打包"}},[e._v("#")]),e._v(" development 和 production 模式的区分打包")]),e._v(" "),a("p",[e._v("通过前面的学习，我们知道在开发环境与生产环境下，打包方式是有区别。\n为了提高在不同开发模式下进行打包的效率，我们分别新建两个文件:webpack.dev.js 和 webpack.prod.js。这两个文件分别代码不同环境下的 webpack 配置。"),a("br"),e._v("\n然后在 package.json 文件中的 script 标签页配置两个命令即可："),a("br"),e._v("\n'dev':'webpack-dev-server --config webpack-dev.js'"),a("br"),e._v("\n'build':'webpack --config webpack.prod.js'")]),e._v(" "),a("p",[e._v("到这里我们又发现一个问题，dev 与 prod 的配置文件有特别多相同的代码，我们继续优化："),a("br"),e._v("\n根目录下新建 webpack.base.js,将 dev 与 prod 相同的代码摘出来放到 base 中去。"),a("br"),e._v("\n这个时候分别将 dev/pro 的文件与 base 文件进行合并输出配置：需要安装第三方模块："),a("code",[e._v("webpack-merge")]),e._v(" (此文默认安装的时候最新版本是 5.0.8,使用 merge 报错，然后回退使用 4.2.2 版本)"),a("br"),e._v("\n最后分别在 dev 和 prod 中引入 webpack-merge,通过"),a("code",[e._v("module.exports = merge(baseConfig, fileConfig)")]),e._v("即可。")]),e._v(" "),a("h3",{attrs:{id:"webpack-和-code-splitting-src-split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-和-code-splitting-src-split"}},[e._v("#")]),e._v(" webpack 和 Code Splitting(src_split)")]),e._v(" "),a("p",[e._v("代码分割与 webpack 无关。")]),e._v(" "),a("ul",[a("li",[e._v("这里的代码分割是指对代码进行分割，提高代码执行效率与性能。")])]),e._v(" "),a("p",[e._v("Demo:")]),e._v(" "),a("ul",[a("li",[e._v("安装第三方包：lodash(提供了一些工具方法)。")]),e._v(" "),a("li",[e._v("比如通过 entry，将 lodash 打包成一个文件，业务代码打成一个文件。")])]),e._v(" "),a("p",[e._v("webpack4 可以自动的帮我们做代码分割：")]),e._v(" "),a("ul",[a("li",[e._v("第一种同步代码做代码分割：在 webpack.base.js 中配置 optimization:{splitChunks:{chunks:'all'} },此时在开发环境下打包，会看到有一个新的打包文件：vendors~main.js.")]),e._v(" "),a("li",[e._v("第二种异步代码做代码分割：异步加载第三方资源(import 异步引入)，无需做任何配置，webpack 会自动帮我们进行代码的分割。")])]),e._v(" "),a("h3",{attrs:{id:"lazy-loading-懒加载-chunk-是什么-src-lazy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lazy-loading-懒加载-chunk-是什么-src-lazy"}},[e._v("#")]),e._v(" Lazy Loading 懒加载，Chunk 是什么？(src_lazy)")]),e._v(" "),a("p",[e._v("懒加载是通过 import 异步加载一个模块，在执行的时候，再去引入。"),a("br"),e._v("\n路由懒加载等提升页面加载效率。"),a("br"),e._v("\n业务代码引入第三方资源的懒加载可以通过 async、await。")]),e._v(" "),a("p",[e._v("chunk 指的是整个项目完成打包后，dist 下面有几个 js 文件就是指几个 chunk。")]),e._v(" "),a("h3",{attrs:{id:"css-文件的代码分割"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-文件的代码分割"}},[e._v("#")]),e._v(" CSS 文件的代码分割")]),e._v(" "),a("p",[e._v("webpack 配置文件中的 output 有两个属性：fileName 和 chunkFilename，这两个的区别是：")]),e._v(" "),a("ul",[a("li",[e._v("webpack配置中入口文件，打包出来的命名根据output的fileName配置 ，在index.html引入")]),e._v(" "),a("li",[e._v("如果是间接模块的js引入，则走chunkFileName这个配置")])]),e._v(" "),a("p",[e._v("CSS 文件代码分割要使用在生产环境中"),a("br"),e._v("\n在测试环境下，"),a("code",[e._v("(src-css)")]),e._v("我们看到并没有讲css文件单独打一个包，如果我们需要讲css文件也单独打一个包，那么：")]),e._v(" "),a("ul",[a("li",[e._v("需要安装"),a("code",[e._v("mini-css-extract-plugin")]),e._v("插件。")]),e._v(" "),a("li",[e._v("使用"),a("code",[e._v("optimize-css-assets-webpack-plugin")]),e._v("这个插件可以对代码进行合并和压缩。")])]),e._v(" "),a("h3",{attrs:{id:"shimming-src-shimming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shimming-src-shimming"}},[e._v("#")]),e._v(" shimming(src_shimming)")]),e._v(" "),a("p",[e._v("根据代码可知，如果在jquery.ui.js中不引入jquery，那么项目在启动后会报错。"),a("br"),e._v("\n这个jquery由于是第三方包，所以不想在所有的页面中为了使用这个"),a("code",[e._v("$")]),e._v("而都引入jquery，于是我们可以这么做：\n在webpack.base.js中")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const webpack = require('webpack')\n// 在plugin配置中：\nnew webpack.ProvidePlugin({\n  $:'jquery'   //如果一个模块中使用了$这个符号，就会在模块中自动引入jquery这个库\n})\n")])])]),a("p",[e._v("这个时候将jquery.ui.js中的第一行注释，重新启动，发现代码运行正常。"),a("br"),e._v("\n这里遗留一个小问题是:在jquery.ui.js中使用了lodash，但是在ProvidePlugin中没有配置lodash，但是却能够打印。")]),e._v(" "),a("h3",{attrs:{id:"环境变量的使用-src-env"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境变量的使用-src-env"}},[e._v("#")]),e._v(" 环境变量的使用(src_env)")]),e._v(" "),a("ol",[a("li",[e._v("将build中三个配置文件copy至src_env")]),e._v(" "),a("li",[e._v("将这三个配置文件分别进行更改，只在webpack.base.js中导出，且传入一个env对象")]),e._v(" "),a("li",[e._v("在package.json中将scripts的dev修改为如下(代码中未做变更，这里只是说明)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' "dev": "webpack-dev-server --config ./build/webpack.base.js", \n "dev-build": "webpack  --config ./build/webpack.base.js", \n')])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("如果为build命令，需要添加一个参数")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' " build": "webpack  --env.production --config ./build/webpack.base.js", \n')])])]),a("p",[e._v("（未对以上代码进行测试）")]),e._v(" "),a("h3",{attrs:{id:"library-打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#library-打包"}},[e._v("#")]),e._v(" Library 打包")]),e._v(" "),a("p",[e._v("自己发布一个 npm 包，在配置好自己的项目包之后，在 npm 官方注册账号，npm login 登录，npm publish 即可")]),e._v(" "),a("h3",{attrs:{id:"progessive-web-application-pwa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#progessive-web-application-pwa"}},[e._v("#")]),e._v(" Progessive Web Application - PWA")]),e._v(" "),a("ul",[a("li",[e._v("安装第三方插件：workbox-webpack-plugin。")]),e._v(" "),a("li",[e._v("线上打包配置文件：添加 plugin：new WorkboxPlugin.GenerateSW()。")]),e._v(" "),a("li",[e._v("在业务代码中，应该 serverWorker，就可以将页面缓存住了。")])]),e._v(" "),a("h3",{attrs:{id:"typascript-的打包配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typascript-的打包配置"}},[e._v("#")]),e._v(" TypaScript 的打包配置")]),e._v(" "),a("p",[e._v("总结至：https://github.com/liugezhou/typescript_webpack")]),e._v(" "),a("h3",{attrs:{id:"使用-webpackdevserver-实现请求转发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-webpackdevserver-实现请求转发"}},[e._v("#")]),e._v(" 使用 WebpackDevServer 实现请求转发")]),e._v(" "),a("p",[e._v("本节主要是对 webpack 的配置 devServer 属性中的 proxy 做了一个讲解，没啥内容。")]),e._v(" "),a("h3",{attrs:{id:"webpackdevserver-解决单页面应用路由问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpackdevserver-解决单页面应用路由问题"}},[e._v("#")]),e._v(" WebpackDevServer 解决单页面应用路由问题")]),e._v(" "),a("p",[e._v("devServer:historyApiFallback: true")]),e._v(" "),a("h3",{attrs:{id:"eslint-在-webpack-中的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eslint-在-webpack-中的配置"}},[e._v("#")]),e._v(" Eslint 在 Webpack 中的配置")]),e._v(" "),a("ul",[a("li",[e._v("npm i eslint -D")]),e._v(" "),a("li",[e._v("npx eslint --init")]),e._v(" "),a("li",[e._v("npm i babel-eslint -D")])]),e._v(" "),a("h3",{attrs:{id:"提升-webpack-打包速度的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提升-webpack-打包速度的方法"}},[e._v("#")]),e._v(" 提升 Webpack 打包速度的方法")]),e._v(" "),a("ol",[a("li",[e._v("跟上技术的迭代：Npde、Npm、Yarn")]),e._v(" "),a("li",[e._v("在尽可能少的模块上应用 Loader (合理使用 exclude 和 include)")]),e._v(" "),a("li",[e._v("Plugin 尽可能精简少用并确保可靠")]),e._v(" "),a("li",[e._v("resolve 参数合理配置(如果想引入默认为 js 或者 jsx 的文件，在 webpack 配置文件中加"),a("code",[e._v("resolve:{extensions:['.js','jsx']}")]),e._v(")")])]),e._v(" "),a("h3",{attrs:{id:"如何编写一个-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何编写一个-loader"}},[e._v("#")]),e._v(" 如何编写一个 loader")]),e._v(" "),a("p",[e._v("借助 loader 处理引用的文件。"),a("br"),e._v(" "),a("a",{attrs:{href:"https://github.com/liugezhou/make-loader",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo 仓库源码"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"如何编写一个-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何编写一个-plugin"}},[e._v("#")]),e._v(" 如何编写一个 Plugin")]),e._v(" "),a("p",[e._v("在打包的某个具体时刻做的操作(比如打包钱清空 dist 目录，打包完成的 html 自动生成等)"),a("br"),e._v(" "),a("a",{attrs:{href:"https://github.com/liugezhou/make-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo 仓库源码"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"bundler-源码编写-模块分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bundler-源码编写-模块分析"}},[e._v("#")]),e._v(" Bundler 源码编写(模块分析)")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/liugezhou/make-bundle",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo 仓库源码"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"通过-createreactapp-深入学习-webpack-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-createreactapp-深入学习-webpack-配置"}},[e._v("#")]),e._v(" 通过 CreateReactApp 深入学习 Webpack 配置")]),e._v(" "),a("h3",{attrs:{id:"通过-vuecli3-学习-webpack-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-vuecli3-学习-webpack-配置"}},[e._v("#")]),e._v(" 通过 VueCli3 学习 webpack 配置")]),e._v(" "),a("h3",{attrs:{id:"常用的-webpack-插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的-webpack-插件"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/FPENfKo7mObEYcVP0wofRA",target:"_blank",rel:"noopener noreferrer"}},[e._v("常用的 webpack 插件"),a("OutboundLink")],1)]),e._v(" "),a("ul",[a("li",[e._v("HotModuleReplacementPlugin:模块热更新插件(webpack 自带)。")]),e._v(" "),a("li",[e._v("html-webpack-plugin:生成 html 文件。")]),e._v(" "),a("li",[e._v("clean-webpack-plugin:打包前清理上一次项目生成的 bundle 文件。")]),e._v(" "),a("li",[e._v("extract-text-webpack-plugin:将 CSS 生成文件，而非内联。")]),e._v(" "),a("li",[e._v("mini-css-extract-plugin:将 CSS 提取为独立的文件的插件。")]),e._v(" "),a("li",[e._v("purifycss-webpack:有时候我们 css 写多了或者重复了，这就造成了多余的代码，我们希望在生产环境下去除。")]),e._v(" "),a("li",[e._v("optimize-css-assets-webpack-plugin:我们希望减小 css 打包后的体积，可以用到此插件。")]),e._v(" "),a("li",[e._v("uglifyjs-webpack-plugin:是 vue-cli 默认使用的压缩代码方式，用来对 js 文件进行压缩，从而减少 js 文件的大小，加速 load 速度。")]),e._v(" "),a("li",[e._v("terser-webpack-plugin:Webpack4.0 默认是使用 terser-webpack-plugin 这个压缩插件，在此之前是使用 uglifyjs-webpack-plugin，这两者的区别是后者对 ES6 的压缩不是很友好。")]),e._v(" "),a("li",[e._v("webpack.NoEmitOnErrorsPlugin():报错但不退出 webpack 进程。")]),e._v(" "),a("li",[e._v("compression-webpack-plugin:所有现代浏览器都支持 gzip 压缩，启用 gzip 压缩可大幅缩减传输资源大小，从而缩短资源下载时间，减少首次白屏时间，提升用户体验。(这个方法还需要后端配置支持)")]),e._v(" "),a("li",[e._v("webpack.DefinePlugin:允许创建一个在编译时可以配置的全局变量，在模块中直接使用这些变量，无需作任何声明，会对开发模式和发布模式的构建允许不同的行为非常有用。")]),e._v(" "),a("li",[e._v("webpack.ProvidePlugin:自动加载模块。")]),e._v(" "),a("li",[e._v("copy-webpack-plugin:我们在 public/index.html 中引入了其他的静态资源(js、png、css 等)，在打包的时候 webpack 并不会帮我们拷贝到 dist 目录，因此 copy-webpack-plugin 可以很友好地帮我们做拷贝工作。")])])])}),[],!1,null,null,null);a.default=t.exports}}]);